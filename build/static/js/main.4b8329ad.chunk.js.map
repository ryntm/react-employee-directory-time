{"version":3,"sources":["components/logo/index.js","components/nav/index.js","components/main/index.js","pages/Directory/Directory.js","pages/EmployeePage/EmployeePage.js","App.js","serviceWorker.js","index.js"],"names":["Logo","className","src","alt","Nav","href","Main","props","children","Directory","employees","Data","useState","filteredEmployees","setFilteredEmployees","nameRef","useRef","departmentRef","history","useHistory","handleEmployeeClick","e","id","target","getAttribute","push","handleSearchByName","current","value","employeeList","nameInput","filter","employee","name","toLowerCase","includes","placeholder","ref","onKeyPress","ev","key","onClick","onChange","department","console","log","map","filteredEmployee","data-id","position","ext","EmployeePage","useParams","branch","email","img","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4b8329ad.chunk.js","sourcesContent":["import React from 'react';\nimport './styles.css';\n\nfunction Logo() {\n    return (\n        <img className=\"logo\" src=\"https://i.pinimg.com/originals/a2/44/a3/a244a37a9fca1b393ff9b949a94c3f05.jpg\" alt=\"logo\"/>\n    )\n}\n\nexport default Logo;","import React from 'react';\nimport Logo from '../logo/index';\nimport './styles.css';\n\n\nfunction Nav() {\n\n\n    return (\n        <section className=\"nav columns\">\n            <div className=\"column is-one-fifth\">\n                <a href=\"/\">\n                    <Logo className=\"logo\" />\n                </a>\n            </div>    \n            <div className=\"place column\">\n                Scanton, PA \n                <br/>\n                Branch Directory\n            </div>\n        </section>\n    )\n}\n\n\n\n\n\nexport default Nav;","import React from 'react';\nimport './styles.css';\n\nfunction Main(props) {\n    return (\n        <div className=\"main-div\">\n            {props.children}\n        </div>\n    )\n}\n\nexport default Main","import React, { useState, useRef } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport Nav from '../../components/nav/index';\nimport Main from '../../components/main/index';\nimport './styles.css';\nimport Data from '../../employeeInformation.json';\n\nfunction Directory() {\n    const employees = Data;\n\n    let [filteredEmployees, setFilteredEmployees] = useState(employees);\n    const nameRef = useRef();\n    const departmentRef = useRef();\n    const history = useHistory();\n\n    function handleEmployeeClick(e) {\n        const id = e.target.getAttribute('data-id')\n        history.push(`/${id}`);\n    }\n\n    function handleSearchByName() {\n        departmentRef.current.value = 'Select a department..';\n        let employeeList = employees\n        let nameInput = nameRef.current.value;\n        employeeList = employees.filter(employee => employee.name.toLowerCase().includes(nameInput.toLowerCase()))\n        setFilteredEmployees(employeeList)\n    }\n\n    function handleDepartmentChange(e) {\n        let department = e.target.value;\n        console.log(department)\n\n        nameRef.current.value = '';\n        \n        let employeeList = employees.filter(employee => employee.department === department)\n        \n        setFilteredEmployees(employeeList)\n    }\n\n    return (\n        <div>\n            <Nav>\n\n            </Nav>\n\n            <Main >\n            <span className=\"title\">Directory</span>\n                <div>\n                    <input \n                        placeholder=\"Search by name..\" \n                        ref={nameRef} \n                        className=\"search-name\" \n                        onKeyPress={(ev) => {\n                            if (ev.key === 'Enter') {\n                            handleSearchByName();\n                            }\n                        }}\n                    >\n                    \n                    </input> <button onClick={handleSearchByName}>Search</button>\n                </div>\n                <p className=\"text\">or</p>\n                <select className=\"dropdown departments\" onChange={handleDepartmentChange} >\n                    <option value = \"Default\">Select a department..</option>\n                    <option value = \"Accounting\">Accounting</option>\n                    <option value = \"Customer Relation\">Customer Relation</option>\n                    <option value = \"Human Resources\">Human Resources</option>\n                    <option value = \"Management\">Management</option>\n                    <option value = \"Office Administration\">Office Administration</option>\n                    <option value = \"Sales\">Sales</option>\n                    <option value = \"Vendor Relation\">Vendor Relation</option>\n                </select>\n\n                <div className=\"employee-list\">\n                    {filteredEmployees\n                    .map(filteredEmployee => (\n                        <div className=\"employee-item\">\n                            <a><span ref={departmentRef} data-id={filteredEmployee.name} key={filteredEmployee.name} onClick={handleEmployeeClick}>{filteredEmployee.name}</span></a> - {filteredEmployee.position} (Ext. {filteredEmployee.ext})\n                        </div>\n                    ))}\n                </div>\n            </Main>\n\n            \n        </div>\n    )\n}\n\nexport default Directory","import React from 'react';\nimport Nav from '../../components/nav/index';\nimport Main from '../../components/main/index';\nimport { useParams } from 'react-router-dom';\nimport Data from '../../employeeInformation.json';\nimport './styles.css'\n\nfunction EmployeePage() {\n    const { name } = useParams();\n    const employees = Data\n\n    return (\n        <div>\n            <Nav></Nav>\n            <Main>\n                <div>\n                    {employees.filter(employee => employee.name === name).map(filteredEmployee => (\n                        <div className=\"employee-main columns\">\n                            <div className=\"employee-info column\">\n                                <p className=\"employee-name\">\n                                    Name: {filteredEmployee.name}\n                                </p>\n                                <p>\n                                    Branch: {filteredEmployee.branch}\n                                </p>\n                                <p>\n                                    Department: {filteredEmployee.department}\n                                </p>\n                                <p>\n                                    Role: {filteredEmployee.position}\n                                </p>\n                                <p>\n                                    Email: <a href={\"mailto:\"+filteredEmployee.email}>{filteredEmployee.email}</a>\n                                </p>\n                                <p>\n                                    Ext: {filteredEmployee.ext}\n                                </p>\n                            </div>\n                            <div className=\"employee-image column\" >\n                            <img className=\"image\" src={filteredEmployee.img} alt={filteredEmployee.name} />\n                            </div>\n                        </div>\n                    ))}\n\n                </div>\n\n\n            </Main>\n\n\n\n            \n        </div>\n    )\n}\n\nexport default EmployeePage","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport './App.css';\nimport Directory from './pages/Directory/Directory';\nimport EmployeePage from './pages/EmployeePage/EmployeePage';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Switch>\n          <Route exact path = '/' component={Directory} />\n          <Route exact path = '/:name' component={EmployeePage} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}